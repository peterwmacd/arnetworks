% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/EstNet.R
\name{estNet}
\alias{estNet}
\title{Estimation for General Autoregressive Networks}
\usage{
estNet(
  X,
  fij,
  gij,
  statsAlpha,
  statsBeta,
  globInitAlpha,
  globInitBeta,
  shrGPrm,
  initXi = NULL,
  initEta = NULL,
  updateMethod = "sequential",
  tol = 0.01,
  maxIter = 100
)
}
\arguments{
\item{X}{A \eqn{p \times p \times n} array of network's adjacency matrices over time.}

\item{fij}{Function for global edge formation behaviour, dependent on the global parameters \eqn{\mathbf{\theta}_f} and sufficient statistics built upon past obervations. See also ‘Details’.}

\item{gij}{Function for global edge dissolution behaviour, dependent on the global parameters \eqn{\mathbf{\theta}_g} and sufficient statistics built upon past obervations. See also ‘Details’.}

\item{statsAlpha}{Sufficient statistics input for \code{fij}.}

\item{statsBeta}{Sufficient statistics input for \code{gij}.}

\item{globInitAlpha}{Initial values for global parameters in \code{fij}.}

\item{globInitBeta}{Initial values for global parameters in \code{gij}.}

\item{shrGPrm}{Number of shared global parameters between \code{fij} and
\code{gij}.}

\item{initXi}{Initial values for \eqn{\xi_1, \dots, \xi_p}. Defaults to a vector of ones if NULL.}

\item{initEta}{Initial values for \eqn{\eta_1, \dots, \eta_p}. Defaults to a vector of ones if NULL.}

\item{updateMethod}{Method for updating global parameters ("sequential" or "batch").}

\item{tol}{Tolerance for the optimization process.}

\item{maxIter}{Maximum iterations allowed for the optimization algorithm.}
}
\value{
A list containing the estimated parameters:
\itemize{
\item \code{gAlphaVal}: Estimated global parameters in \code{fij}.
\item \code{gBetaVal}: Estimated global parameters in \code{gij}.
\item \code{xi}: Estimated values of \eqn{\xi_1, \dots, \xi_p}.
\item \code{eta}: Estimated values of \eqn{\eta_1, \dots, \eta_p}.
}
}
\description{
This function estimates the parameters of a user-specified autoregressive network model
using an Iterative Method-of-Moments (IMoM) estimation
procedure. The method alternates
between optimizing global and local parameters, capturing edge formation and
dissolution dynamics in dynamic networks.
}
\details{
The network dynamics are modeled through autoregressive equations for the probabilities of edge formation and dissolution between nodes i and j at time t-1:
\deqn{\alpha_{i,j}^{t-1} = \xi_i \xi_j f(\mathbf{X_{t-1}},...,\mathbf{X_{t-m_f}}; \mathbf{\theta}_f),}{"alpha_{i,j}^{t-1} = xi_i * xi_j * f(X_{t-1},...,X_{t-m_f}; theta_f),"}
\deqn{\beta_{i,j}^{t-1} = \eta_i \eta_j g(\mathbf{X_{t-1}},...,\mathbf{X_{t-m_g}}; \mathbf{\theta}_g),}{"beta_{i,j}^{t-1} = eta_i * eta_j * g(X_{t-1},...,X_{t-m_g}; theta_g),"}
where \eqn{\xi_i, \xi_j, \eta_i, \eta_j} are node-specific parameters, and \eqn{f}, \eqn{g} represent functions defining global edge dynamics, parameterized by \eqn{\mathbf{\theta}_f} and \eqn{\mathbf{\theta}_g}, respectively.

User-Defined Functions:
The \code{fij} and \code{gij} functions, modeling global edge formation and dissolution dynamics, must adhere to specific input/output rules:
\itemize{
\item \strong{First Argument}: A vector of global parameters, with the first \code{shrGPrm} parameters being shared across both functions.
\item \strong{Second Argument}: A \eqn{p \times p \times (n-1) \times d} array of sufficient statistics from observed networks, where \eqn{d} is the number of sufficient statistics.
\item \strong{Output}: A \eqn{p \times p \times (n-1)} array representing the values \eqn{f(\mathbf{X_{t-1}},...,\mathbf{X_{t-m_f}}; \mathbf{\theta}_f)} or \eqn{g(\mathbf{X_{t-1}},...,\mathbf{X_{t-m_g}}; \mathbf{\theta}_g)} per node pair across time.
}

Estimation Procedure:
\enumerate{
\item \strong{Initialization}: Sets initial values for local parameters.
\item \strong{Global Optimization}: Utilizes initialized local parameters within a global
log-likelihood function, optimizing it through a quasi-Newton method to
estimate global parameters.
\item \strong{Local Optimization}: With newly estimated global parameters, local
log-likelihood functions are maximized through a quasi-Newton method to update local parameter estimates.
\item \strong{Iteration and Convergence}: The process iterates until convergence criteria are met, typically when the mean absolute difference between successive global parameter estimates drops below \code{tol},
or when the global log-likelihood decreases, signaling optimal estimates.
}
}
\examples{
# Example 1: transitivity model.
p = 30; n = 20
xi = rep(0.7, p); eta = rep(0.8, p)
a = 30; b = 15

# Simulate data using simulateTransitivity function
simulated_data = simulateTransitivity(p, n, xi, eta, a, b)
X = simulated_data$X
U = simulated_data$U[, , 1:(n - 1)]
V = simulated_data$V[, , 1:(n - 1)]

statsAlpha = statsBeta = array(c(U, V), dim = c(p,p,n-1,2))

# Initialize global parameters for fij and gij
globInitAlpha = globInitBeta = rep(100, 2)

# Define edge formation and dissolution functions based on transitivity model
fij = function(global, stats) {
  exp(global[1] * stats[, , , 1]) /
  (1 + exp(global[1] * stats[, , , 1]) + exp(global[2] * stats[, , , 2]))
}
gij = function(global, stats) {
  exp(global[2] * stats[, , , 2]) /
  (1 + exp(global[1] * stats[, , , 1]) + exp(global[2] * stats[, , , 2]))
}

result = estNet(X, fij, gij, statsAlpha, statsBeta, globInitAlpha, globInitBeta,
                shrGPrm = 2, updateMethod = "sequential", maxIter=2)

result = estNet(X, fij, gij, statsAlpha, statsBeta, globInitAlpha, globInitBeta,
                shrGPrm = 2, updateMethod = "batch", maxIter=2)
# NOTE: small maxIter used to limit example runtime, default value is 100

# Example 2: persistence model.
p = 30; n = 20
xi = runif(p,0.5,0.9); eta = runif(p,0.5,0.9)
a = 0.5; b = 0.5

# Simulate data using simulatePersistence function
simulated_data = simulatePersistence(p, n, xi, eta, a, b)
X = simulated_data$X
statsAlpha =  1-X[,,4:n-2]+ ( 1-X[,,4:n-2])*( 1-X[,,4:n-3])
statsBeta =  X[,,4:n-2]+ ( X[,,4:n-2])*( X[,,4:n-3])
X = X[,, 3: n]

# Initialize global parameters for fij and gij
globInitAlpha = globInitBeta = 1

# Define edge formation and dissolution functions based on persistence model
fij = function(global, stats) {
  return (exp(-1 -global*stats))
}
gij <- function(global, stats) {
  return (exp(-1 -global*stats))
}

result <- estNet(X, fij, gij, statsAlpha, statsBeta, globInitAlpha, globInitBeta,
                 shrGPrm = 0, maxIter = 2)
# NOTE: small maxIter used to limit example runtime, default value is 100
# NOTE: The provided examples are for illustration purpose.
#       Larger sample, e.g. p = 50 and n = 100, is recommended for better estimation performance.

}
