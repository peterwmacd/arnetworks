% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Step1_GenNet.R
\name{simulate_persistence}
\alias{simulate_persistence}
\title{Simulate a Persistence Model}
\usage{
simulate_persistence(p, n, xi, eta, a, b, burn_in = 200)
}
\arguments{
\item{p}{Integer, specifying the number of nodes in the network.}

\item{n}{Integer, indicating the number of observations to simulate, excluding the burn-in period.}

\item{xi}{Numeric vector of length \eqn{p}, representing local parameter values that influence \eqn{\alpha_{i,j}^{t-1}}.}

\item{eta}{Numeric vector of length \eqn{p}, representing local parameter values that influence \eqn{\beta_{i,j}^{t-1}}.}

\item{a}{Global parameter that influence \eqn{\alpha_{i,j}^{t-1}}.}

\item{b}{Global parameter that influence \eqn{\beta_{i,j}^{t-1}}.}

\item{burn_in}{Integer, the length of the burn-in period for achieving stationarity.}
}
\value{
A list containing:
\itemize{
\item \code{X}: An array of the network's adjacency matrices over time (\eqn{p} x \eqn{p} x \eqn{n}), after the burn-in period.
}
}
\description{
Simulates the evolution of a network based on a persistence model. This model
incorporates specified local and global parameters to influence the dynamics of network
connections over time, utilizing a burn-in period to achieve stationarity.
}
\details{
The model's evolution is characterized by two key equations that govern the probability
of edge formation and dissolution between nodes, based on previous states of the network:
\deqn{\alpha_{i,j}^{t-1} = \xi_i \xi_j \exp\left( - 1 - a \left[ (1 - X_{i,j}^{t-2}) +
(1 - X_{i,j}^{t-2})(1 - X_{i,j}^{t-3}) \right] \right),}
\deqn{\beta_{i,j}^{t-1} = \eta_i \eta_j \exp\left( - 1 - b \left[ X_{i,j}^{t-2} +
X_{i,j}^{t-2} X_{i,j}^{t-3} \right] \right),}
where \eqn{\alpha_{i,j}^{t-1}} and \eqn{\beta_{i,j}^{t-1}} represent the probabilities
of edge formation and dissolution, respectively, modulated by the interaction of
nodes \eqn{i} and \eqn{j} in previous timesteps.
}
\examples{
p = 10; n = 100
xi = runif(p, 0.5, 0.9)
eta = runif(p, 0.5, 0.9)
a = 0.5
b = 0.5
result = simulate_persistence(p, n, xi, eta, a, b)
}
